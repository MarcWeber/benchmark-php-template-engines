!!!
%html
  %head
    %title=$title
    %meta(http-equiv="content-type" content="text/html; charset=UTF-8")

    - $lang_meta = strtolower(LANG_META)
    %meta(name="language" content=$lang_meta)
    %meta(name="description" content="nifyt expressive template engine for PHP: #{$title}")
    %meta(http-equiv="content-language" content="#{$lang_meta}")
    -header('Content-language: '.$lang_meta)

    :javascript
      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-23403408-1']);
      _gaq.push(['_setDomainName', 'none']);
      _gaq.push(['_setAllowLinker', true]);
      _gaq.push(['_trackPageview']);

      (function() {
        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
      })();

  %body
    %div
      %h1=$title
      %p
        This benchmark only takes timings of
      %ul
        %li starting up a template engine (load all necesseary .php files)
        %li putting (quoted/verbatim) text into HTML like text with placeholders
        %li assemlbing final page (inserting 3 $html strings into a <html>..</html> template)

      %p
        Details see bottom. It does not care about caching which eg Smarty also provides. This can
        be trivially be implemented for any template engine. The HTML Link
        proofs that all runs produce the same result.


      %div
        %h2 timing values:
        %table
          %tr
            %th chart nr
            %th Engine
            %th time_setup [ms]
            %th time_case_1 [ms]
            %th time_case_2 [ms]
            %th proof
            %th n_runs
            %th n_iterations

          - $i = count($werte)-1
          -foreach($werte as $wert)
            %tr
              %td=$i--
              %td
                %a(href="#{$wert['url']}")=$wert['template_engine_name_version']
              %td=$wert['time_setup']*1000
              %td=$wert['time_case_1']*1000
              %td=$wert['time_case_2']*1000
              %td
                %a(href="#{'?html_engine='.$wert['id']}") HTML
              %td=$wert['n_runs']
              %td=$wert['n_iterations']

        %img(src="#{$graph_url}")

      %h2 Details about the test
      %p
        4 timings are measured in multiple test runs. Each time a new PHP
        executable process is launched so that GC timing etc affects all runs
        in a similar fair way.
      %ul
        %li \1. php startup time
        %li
          \2. setup_time of the engine. The main file is required and all .php
          files typicall used. strace is used to reveal which files PHP opens.
        %li
          \3. time_case_1: 100 rows having 3 fields Surname, Lastname, age are rendered as table.
        %li
          \4. time_case_2: the result of 3 (content), title, header,
          description, navigation, fields are rendered simulating a simple typical page
      Want more details ? Read the
      %a(href="https://github.com/MarcWeber/benchmark-php-template-engines") code on github.
      %br
      Eg start with the plain old
      %a(href="https://github.com/MarcWeber/benchmark-php-template-engines/blob/master/implementations/php/run.php") PHP implementation

      %p More benchmarks will be coming soon.
